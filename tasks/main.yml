---
- name: set variable overrides
  ansible.builtin.set_fact:
    _nfs_packages_server: "{{ nfs_packages_server | default(nfs_packages_server_default | sorted_get(overrides)) }}"
    _nfs_packages_client: "{{ nfs_packages_client | default(nfs_packages_client_default | sorted_get(overrides)) }}"
    _nfs_services_server: "{{ nfs_services_server | default(nfs_services_server_default | sorted_get(overrides)) }}"
    _nfs_services_client: "{{ nfs_services_client | default(nfs_services_client_default | sorted_get(overrides)) }}"
  vars:
    overrides:
      - "{{ ansible_distribution | lower }}-{{ ansible_distribution_release | lower }}"
      - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}"
      - "{{ ansible_distribution | lower }}"
      - "{{ ansible_os_family | lower }}"
      - "default"

- name: install nfs client packages
  ansible.builtin.package:
    name: "{{ _nfs_packages_client }}"
    state: "{{ nfs_packages_state }}"

- name: install nfs server packages
  ansible.builtin.package:
    name: "{{ _nfs_packages_server }}"
    state: "{{ nfs_packages_state }}"
  when: nfs_server

- name: create nfs export directories
  ansible.builtin.file:
    path: "{{ item.strip().split()[0] }}"
    state: directory
  loop: "{{ nfs_exports }}"
  when: nfs_server
  notify: reload nfs

- name: configure nfs exports
  ansible.builtin.template:
    src: "{{ nfs_conf_template }}"
    dest: "{{ nfs_conf_path }}"
  when: nfs_server
  notify: reload nfs

- name: manage nfs server services
  ansible.builtin.service:
    name: "{{ item }}"
    state: "{{ nfs_service_status }}"
    enabled: "{{ nfs_service_enabled }}"
  loop: "{{ _nfs_services_server }}"
  when: nfs_server

- name: manage nfs client services
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop: "{{ nfs_client_services }}"
  when: nfs_client_services | length > 0
